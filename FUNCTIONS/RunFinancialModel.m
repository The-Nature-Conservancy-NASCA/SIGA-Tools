function RunFinancialModel(PathProject, NameSce, NameExe, NameBasin)

if strcmp(NameBasin,'Chivor')
    Params.AreaEmbalse = '12057300'; %m2
    Params.Vt_max1 = '587.59'; %Hm3
    Params.Vt_max2 = '586.09'; %Hm3
    Params.Vt_min  = '37.95';  %Hm3
    Params.qturmax = '160'; %m3/dia
    Params.qturmin = '0.0'; %m3/dia
else
    Params.AreaEmbalse = '9899530.844'; %m2
    Params.Vt_max1 = '764.34'; %Hm3
    Params.Vt_max2 = '761.80'; %Hm3
    Params.Vt_min  = '132.50'; %Hm3
    Params.qturmax = '129'; %m3/dia
    Params.qturmin = '0.0'; %m3/dia
end


CodePython = {'#-*- coding: utf-8 -*-',...
'#Editor de Spyder ',...
'#Recrea las reglas de operación de embalses en términos del almacenamiento meta y caudal turbinado ',...
'#Autor: Mariana Jimenez ',...
' ',...
'# ============================================================================== ',...
'# - Almacenamiento meta ',...
'# ============================================================================== ',...
'# - Importar módulos requeridos ',...
'import os  ',...
'import numpy as np ',...
'import pandas as pd ',...
'from datetime import datetime',...
' ',...
' ',...
' ',...
'def CargarSeriesSIGA(ruta, ini='''', fin=''''): ',...
'',...
'    # Abre y realiza la lectura del encabezado del archivo',...
'    a = open(ruta)',...
'    a.readline();',...
'    num_ser = int(a.readline().strip())',...
'    a.readline();',...
'    a.readline();',...
'    num_per = int(a.readline().strip())',...
'    a.readline();',...
'    a.readline();',...
'    val_fal = float(a.readline().strip())',...
'    X = np.zeros((num_ser, 3))',...
'    a.readline();',...
'    a.readline();',...
'    linea = a.readline().strip()',...
'    X[:, 0] = np.array(linea.split(" ")).astype(float)',...
'    a.readline();',...
'    a.readline();',...
'    linea = a.readline().strip()',...
'    X[:, 1] = np.array(linea.split(" ")).astype(float)',...
'    a.readline();',...
'    a.readline();',...
'    linea = a.readline().strip()',...
'    X[:, 2] = np.array(linea.split(" ")).astype(float)',...
'    a.readline();',...
'    a.readline();',...
'    linea = a.readline().strip()',...
'    estaciones = linea.split(" ")[3:]',...
'',...
'    # Lee el cuepo del archivo, convierte los datos a flotantes y',...
'    # reemplaza los faltantes por np.nan',...
'    fechas = []',...
'    datos = np.zeros((num_per, num_ser))',...
'    for i in range(0, num_per):',...
'        linea = a.readline().strip().split(' ')',...
'        ano = int(float(linea[0]))',...
'        mes = int(float(linea[1]))',...
'        dmf = float(linea[2])',...
'        dia = int(dmf)',...
'        hora = int((dmf - dia) * 24)',...
'        minu = int(((dmf - dia) * 24 - hora) * 60)',...
'        seg = int((((dmf - dia) * 24 - hora) * 60 - minu) * 60)',...
'        fechas.append(datetime(ano, mes, dia, minu, seg))',...
'        datos[i, :] = np.array(np.array(linea[3:]).astype(float))',...
'        mask = datos[i, :] == val_fal',...
'        datos[i, mask] = np.nan',...
'    a.close()',...
'',...
'    # Construye el Dataframe',...
'    datos = pd.DataFrame(datos, index=fechas, columns=estaciones)',...
'    datos.sort_index(inplace=True)',...
'',...
'    # Recarta el Dataframe entre las fechas inicial y final, construye el',...
'    # diccionario y retorna',...
'    if ini != "":',...
'        fechas = pd.to_datetime(datos.index.values)',...
'        inicio = ini if ini > fechas[0] else fechas[0]',...
'        mask = fechas >= inicio',...
'        datos = datos[mask]',...
'    if fin != "":',...
'        fechas = pd.to_datetime(datos.index.values)',...
'        final = fin if fin < fechas[-1] else fechas[-1]',...
'        mask = fechas <= final',...
'        datos = datos[mask]',...
'    num_per = datos.index.values.size',...
'    series = {"num_ser": num_ser, "num_per": num_per, "X": X, "datos": datos}',...
'    print("Se cargo correctamente " + ruta)',...
'',...
'    return series',...
'',...
'def ExportarSeriesSIGA(ruta, series):',...
'',...
'    # Abre el archivo y escribe los metadatos',...
'    archivo = open(ruta, "w")',...
'    archivo.write("[NUMERO DE SERIES]\n" + str(series["num_ser"]) + "\n\n")',...
'    archivo.write("[NUMERO DE REGISTROS]\n" + str(series["num_per"]) + "\n\n")',...
'    archivo.write("[VALOR DE DATOS FALTANTES]\n-9999.0\n\n")',...
'    archivo.write("[COORDENADAS X]\n" + " ".join(series["X"][:, 0].astype(str)) + "\n\n")',...
'    archivo.write("[COORDENADAS Y]\n" + " ".join(series["X"][:, 1].astype(str)) + "\n\n")',...
'    archivo.write("[COORDENADAS Z]\n" + " ".join(series["X"][:, 2].astype(str)) + "\n\n")',...
'    archivo.write("[MATRIZ DE DATOS]\nYear Month Day " + \',...
'                  " ".join(np.array(series["codigos"]).astype(str)) + "\n")',...
'',...
'    # Escribe la matriz de datos, cierra el archivo y retorna',...
'    datos = series["datos"].values',...
'    fechas = pd.to_datetime(series["datos"].index.values)',...
'    datos[np.isnan(datos)] = -9999.0',...
'    for i in range(0, series["num_per"]):',...
'        linea = str(fechas[i].year) + " " + str(fechas[i].month) + " " + \',...
'                str(fechas[i].day + fechas[i].hour / 24.0 + fechas[i].minute / 1560.0 + \',...
'                    fechas[i].second / 86400.0) + " " + " ".join(datos[i, :].astype(str)) + "\n"',...
'        archivo.write(linea)',...
'    del datos',...
'    archivo.close()',...
'    print("{i} Aviso de ExportarSeriesSIGA: Las series " + ruta + " se exportaron correctamente")',...
'',...
'    return',...
'',...
'def flujobase(alpha, btant, Qt):',...
'',...
'    bt = ((alpha / (2 - alpha)) * btant) + (((1 - alpha) / (2 - alpha)) * Qt)',...
'    IFB_diario = bt / Qt',...
'',...
'    return bt, IFB_diario',...
' ',...
' ',...
' ',...
'# ============================================================================== ',...
'# - Definir parámetros ',...
'# ============================================================================== ',...
'# Siempre debe ser chivor porque los datos semmilla están para chivor ',...
' ',...
'for j in range(0,len(NamePlace)): ',...
'    # ============================================================================== ',...
'    # - Cargar series ',...
'    # ============================================================================== ',...
'    simulacion  = CargarSeriesSIGA(os.path.join(PathProject,"salidas", NameSce,NameExe,"series",NamePlace[j])) ',...
'    volutil     = CargarSeriesSIGA(os.path.join(PathProject,"entradas","volumen_util","Volumen_Util_Promedio.txt")) ',...
' ',...
'    # ============================================================================== ',...
'    # - Definir rutas ',...
'    # ============================================================================== ',...
'    ruta_resultados_diarios     = os.path.join(os.path.join(PathProject,"salidas", NameSce,NameExe,"series","Energy_" + NamePlace[j])) ',...
' ',...
'    # ============================================================================== ',...
'    # - Leer datos ',...
'    # ============================================================================== ',...
'    # datos= pd.read_excel(ruta_datos, index_col=1, parse_dates= True) ',...
' ',...
'    # Area embalse Chivor ',...
['    area_embalse = ',Params.AreaEmbalse,'  # m2 '],...
'    # Volumen util máximo ',...
'    if simulacion["datos"].index[0].year == 2010: ',...
['        Vt_max = ',Params.Vt_max1,'  # Hm3 (Vmax para 2010 aplica para intervención y linea base) '],...
'    else: ',...
['        Vt_max = ',Params.Vt_max2,'  # Hm3 (Vmax para el año 2020 aplica para simulaciones erosion y f.base) '],...
'    Vt_max = Vt_max * 1000000.  # m3 ',...
'    # Volumen util minimo ',...
['    Vt_min = ',Params.Vt_min,'  # Hm3 '],...
'    Vt_min = Vt_min * 1000000.  # m3 ',...
'    # Volumen meta (A_t+1,meta) valores promedio 2014-2019 ',...
'    Vmeta = volutil["datos"]["vol_util(hm3/d)"][:]  # hm3 ',...
'    Vmeta = Vmeta * 1000000.  # m3 ',...
'    # Volumen al inicio (Valor semilla) Se toma el vol max esquematico ',...
'    Vt1 = Vt_max  # m3 se asume que inicia en el embalse lleno ',...
'    # Caudal de ingreso al embalse ',...
'    QT = simulacion["datos"]["Q5(m3.d-1)"][:]  # m3/d ',...
'    # Caudal turbinado maximo ',...
['    qturmax = ',Params.qturmax,'  # m3/s '],...
'    qturmax = qturmax * 86400.  # m3/dia ',...
'    # Caudal turbinado minimo ',...
['    qturmin = ',Params.qturmin,'  # m3/s '],...
'    qturmin = qturmin * 86400.  # m3/dia ',...
'    # AUTILMAX= 10 ',...
'    volsed = simulacion["datos"]["ESDET(m3)"][:]  # m3/dia ',...
'    volsed_ton = volsed * 2.65  # Ton/dia  2.65 ton/m3 (densidad del suelo) ',...
' ',...
'    # ============================================================================== ',...
'    # - Balance de masas caudal turbinado ',...
'    # ============================================================================== ',...
' ',...
'    fechas = simulacion[ ',...
'        "datos"].index  # crea una lista de la columna que tiene las filas indexadas, en este caso las fechas ',...
'    fecha = fechas[0] ',...
'    lista_variables = ["Q_ing", "Q_turb", "Vol_util_final", "Q_vertido", "Vol_meta", "Energia", "Econtratos", "Ebolsa", ',...
'                       "num_iter", "bt", "bt/Qt", "Q_sol", "Vol_util_max", "Sed"] ',...
'    resultadosdiarios = pd.DataFrame(index=fechas, columns=lista_variables).astype(float) ',...
'    bt = QT[fecha] ',...
'    for fecha in fechas[:-1]: ',...
'        # fecha= fechas[0] ',...
'        ano = volutil["datos"].index[0].year ',...
'        mes = fecha.month ',...
'        dia = fecha.day ',...
'        fecha2 = pd.to_datetime({"year": [ano], "month": [mes], "day": [dia]})[ ',...
'            0]  # llama siempre el mismo año del ciclo promedio de vol util ',...
'        vmeta_t2 = Vmeta[fecha2] ',...
'        QT1 = QT[fecha] ',...
' ',...
'        # - Ecn balance de masas caudal turbinado ',...
'        qturb_it = Vt1 - vmeta_t2 + QT1 ',...
' ',...
'        contador = 0 ',...
'        # Almacenamiento máximo para el año en cuestion ',...
' ',...
'        # Reducción del volumen útil por entrada de sedimentos diariamente ',...
'        Vt_max = Vt_max - volsed[fecha] ',...
' ',...
'        almq_it = True ',...
'        while (almq_it and (contador <= 10)): ',...
'            contador = contador + 1 ',...
'            # - Reglas Caudal turbinado ',...
'            if qturb_it >= qturmax: ',...
'                qturb_2it = qturmax ',...
'            elif qturb_it <= qturmin: ',...
'                qturb_2it = qturmin ',...
'            else: ',...
'                qturb_2it = qturb_it ',...
'            # ',...
'            # - Balance de masas almacenamiento ',...
'            Vt2 = Vt1 + QT1 - qturb_2it ',...
' ',...
'            # - Reglas almacenamiento ',...
'            if Vt2 >= Vt_max: ',...
'                Vtfinal = Vt_max ',...
'                qvert = Vt2 - Vt_max ',...
'                qturb_it = qturb_2it ',...
'            elif Vt2 <= Vt_min: ',...
'                Vtfinal = Vt_min ',...
'                qvert = 0. ',...
'                qturb_it = qturb_2it - (Vt_min - Vt2) ',...
'            else: ',...
'                qturb_it = qturb_2it ',...
'                Vtfinal = Vt2 ',...
'                qvert = 0. ',...
'            almq_it = (qturb_2it != qturb_it) ',...
' ',...
'        # Reparticion energia ',...
'        Etotal = qturb_2it * (6.3648 * 24.) / 86400. ',...
'        Econtratos = Etotal * 0.85 ',...
'        Ebolsa = Etotal * 0.15 ',...
'        Vt1 = Vtfinal ',...
'        # ',...
'        resultadosdiarios["Q_ing"][fecha] = QT1 / 86400.  # m3/s ',...
'        resultadosdiarios["Q_turb"][fecha] = qturb_2it / 86400.  # m3/s ',...
'        resultadosdiarios["Vol_util_final"][fecha] = Vtfinal / 1000000.  # Hm3 ',...
'        resultadosdiarios["Energia"][fecha] = Etotal  # MW/h ',...
'        resultadosdiarios["Econtratos"][fecha] = Econtratos  # MW/h ',...
'        resultadosdiarios["Ebolsa"][fecha] = Ebolsa  # MW/h ',...
'        resultadosdiarios["Q_vertido"][fecha] = qvert / 86400.  # m3/s ',...
'        resultadosdiarios["Vol_meta"][fecha] = Vmeta[fecha2] / 1000000.  # Hm3 ',...
'        resultadosdiarios["num_iter"][fecha] = contador ',...
'        resultadosdiarios["Vol_util_max"][fecha] = Vt_max / 1000000.  # Hm3 ',...
'        resultadosdiarios["Q_sol"][fecha] = volsed[fecha]  # m^3.dia^{-1} ',...
'        resultadosdiarios["Sed"][fecha] = volsed_ton[fecha]  # Ton/dia ',...
'        resultadosdiarios["bt"][fecha], resultadosdiarios["bt/Qt"][fecha] = flujobase(0.925, bt, QT1) ',...
'        bt = resultadosdiarios["bt"][fecha] ',...
' ',...
'    X = [simulacion["X"][0] for i in resultadosdiarios.columns] ',...
'    X = np.array(X) ',...
'',...
'    # eliminación del último dato (espurio) ',...
'    resultadosdiarios.iloc[-1, :] = np.nan ',...
' ',...
'    seriesdiarias = {"num_ser": len(resultadosdiarios.columns), "num_per": len(fechas), "X": X, ',...
'                     "codigos": resultadosdiarios.columns, "datos": resultadosdiarios.copy()} ',...
'    ExportarSeriesSIGA(ruta_resultados_diarios, seriesdiarias) ',...
' ',...
'    print("Ok -> " + NameSce + "-" + NameExe + "-" + NamePlace[j]) '};

% PathProject = 'C:\Users\jonathan.nogales.TNC\Box\01-TNC-ThinkPad-P51\14-Project-Cloud-Forest-Blue-Energy\06-TMP\Dummy-SIGA\Chivor';
% NameSce     = 'LineaBase';
% NameExe     = '20210113_145238';

Tmp   = dir(fullfile(PathProject,'salidas', NameSce, NameExe,'series','*.txt'));
Tmp   = {Tmp.name}';

NamePlace = ['["',Tmp{1},'"'];
for i = 2:length(Tmp)
    NamePlace = [NamePlace,',"',Tmp{i},'"'];
end
NamePlace = [NamePlace,']'];

ID_File = fopen(fullfile(PathProject,'salidas', NameSce, NameExe,'series','Energy.py'),'w');

%% Save code Python
fprintf(ID_File,'%s\n', '# -*- coding: utf-8 -*-');
fprintf(ID_File,'%s\n', '#################################');
fprintf(ID_File,'%s\n', '#Entradas');
fprintf(ID_File,'%s\n', '#################################');
fprintf(ID_File,'%s\n',['PathProject = r"',PathProject,'"']);
fprintf(ID_File,'%s\n',['NameSce = r"',NameSce,'"']);
fprintf(ID_File,'%s\n',['NameExe = r"',NameExe,'"']);
fprintf(ID_File,'%s\n',['NamePlace = ',NamePlace]);
fprintf(ID_File,'%s\n', '#################################');

%% Save Code
for i = 1:length(CodePython)
    fprintf(ID_File,'%s\n', CodePython{i});
end
fclose(ID_File);

system(['conda activate base & python "',fullfile(PathProject,'salidas', NameSce, NameExe,'series','Energy.py'),'"'], '-echo')
